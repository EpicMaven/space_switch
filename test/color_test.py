#!/usr/bin/env python3

#
# Nova Labs space_switch
# This script handles the hardware space switch and updating the state in the Nova Labs Event Service.  Toggling the
# physical switch updates the Event Service with the update state and changes the physical LEDs.  The LEDs indicate the
# current state.
#
# LED indicator
# ----------------------------
# all grey            - startup
# all green           - OPEN
# all red             - CLOSED
# 2nd half grey       - changing state, updating Event Service
# 2nd half dark green - Event Service updated to open, waiting for pull from Event Service to confirm
# 2nd half dark red   - Event Service updated to closed, waiting for pull from Event Service to confirm
# 2nd half yellow     - error updating or pulling from Event Service
#
# The Event Service is a simple RESTful service for adding and retrieving events.  An event has a type, value, time,
# and UUID.  The UUID is generated by the Event Service.
#
#

#import network, requests, json, time, math
import requests, json, time, math, logging
import signal
import sys
#from machine import Pin
import RPi.GPIO as GPIO
from neopixel import *

SWITCH_GPIO = 23

LED_COUNT      = 12      # Number of LED pixels.
LED_GPIO_PIN   = 18      # GPIO pin connected to the pixels (18 uses PWM!).
#LED_GPIO_PIN   = 10      # GPIO pin connected to the pixels (10 uses SPI /dev/spidev0.0).
LED_FREQ_HZ    = 800000  # LED signal frequency in hertz (usually 800khz)
LED_DMA        = 10      # DMA channel to use for generating signal (try 10)
LED_BRIGHTNESS = 255     # Set to 0 for darkest and 255 for brightest
LED_INVERT     = False   # True to invert the signal (when using NPN transistor level shift)
LED_CHANNEL    = 0       # set to '1' for GPIOs 13, 19, 41, 45 or 53
LED_STRIP      = ws.WS2811_STRIP_GRB   # Strip type and colour ordering


PIXEL_ALL = list(range(LED_COUNT))
PIXEL_HALF = math.floor(LED_COUNT/2)
PIXEL_75_PCT = math.floor(LED_COUNT*.75)
PIXEL_FIRST_HALF = list(range(0, PIXEL_75_PCT))
PIXEL_SECOND_HALF = list(range(PIXEL_75_PCT, LED_COUNT))

RED        = Color(0, 255, 0)
RED_DARK   = Color(0, 50, 0)
GREEN      = Color(255, 0, 0)
GREEN_DARK = Color(50, 0, 0)
YELLOW     = Color(255, 255, 0)
GREY       = Color(50, 50, 50)
GREY_DARK  = Color(20, 20, 20)
OFF        = Color(0, 0, 0)
    
# Define functions which animate LEDs in various ways.
def colorWipe(strip, color, wait_ms=50):
	"""Wipe color across display a pixel at a time."""
	for i in range(strip.numPixels()):
		strip.setPixelColor(i, color)
		strip.show()
		time.sleep(wait_ms/1000.0)

#
# shine all pixels this color
#
def shine_all(color):
    colorWipe(strip, color)
    strip.show()


#
# shine second half of the LEDs to this color
#
def shine_second_half(color):
    for i in PIXEL_SECOND_HALF:
        strip.setPixelColor(i, color)
    strip.show()


#
# shine every other pixel to this color
#
def shine_alternate(color):
    for i in range(LED_COUNT)[::2]:
        strip.setPixelColor(i, color)
    strip.show()


# turn all green to indicate Event Service latest event is open
def shine_open():
    shine_all(GREEN)


# turn all red to indicate Event Service latest event is closed
def shine_closed():
    shine_all(RED)


# change LEDs to reflect Event Service updated with new state, waiting to confirm by fetching event from Event Service
def shine_updated_open():
    shine_second_half(GREEN_DARK)


# change LEDs to reflect Event Service updated with new state, waiting to confirm by fetching event from Event Service
def shine_updated_closed():
    shine_second_half(RED_DARK)


# change LEDs to yellow to indicate error
def shine_error():
    shine_second_half(YELLOW)


# change LEDs to indicate pending update to Event Service
def shine_changing_state():
    shine_second_half(GREY)


# turn all grey on boot
def shine_boot():
    shine_all(GREY_DARK)


# turn off all LEDs
def shine_off():
    shine_all(OFF)



# setup NeoPixel
strip = Adafruit_NeoPixel(LED_COUNT, LED_GPIO_PIN, LED_FREQ_HZ, LED_DMA, LED_INVERT, LED_BRIGHTNESS, LED_CHANNEL)
strip.begin()


shine_boot()
time.sleep(1)


shine_changing_state()
time.sleep(1)

shine_updated_closed()
time.sleep(1)

shine_closed()
time.sleep(1)


shine_changing_state()
time.sleep(1)

shine_updated_open()
time.sleep(1)

shine_open()
time.sleep(1)

shine_updated_open()
time.sleep(1)

shine_off()


